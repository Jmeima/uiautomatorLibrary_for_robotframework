# !/usr/bin/python
# -*- coding: utf-8 -*-

import sys,time
import os,commands,shlex
from uiautomator import device as d

#server 
def install_server():
	command_line='adb push /home/jueimei/autoSys/pyAndroid/bundle.jar /data/local/tmp|adb push /home/jueimei/autoSys/pyAndroid/uiautomator-stub.jar /data/local/tmp'
	f = os.popen(command_line)
	f = f.read() 
	print f

def start_server():
	command_line='adb shell uiautomator runtest bundle.jar uiautomator-stub.jar -c com.github.uiautomatorstub.Stub &'
	f = os.popen(command_line)
	f = f.read() 
	print f

def screenshot():
	d.screenshot("home.png")

#system behavior
def home_screen():
	d.press.menu()

def screen_on():
	d.screen.on()

def sleep_mode():
	d.sleep()

def sleep(time=2):
	time.sleep(time)

#system btn
def press_back():
	d.press.back()

def press_home():
	d.press.home()

def press_recent():
	d.press.recent()

#notification
def open_notification():
	d.open.notification()

def quick_settings():
	d.open.notification()
	d.open.quick_settings()

#wait
# wait until the ui object appears
def wait_until_txt_time(txt,timeout=15):
	d(text=txt).wait.exists(timeout=timeout)

# wait until the ui object gone
def wait_until_txt_gone(txt,timeout=15):
	d(text=txt).wait.gone(timeout=timeout)

def wait_until_window_idle():
	d.wait.idle()

def wait_until_window_update():
	d.wait.update()

def wait_until_contain_txt(txt,timeout=15):
	if d(textContains=txt).wait.exists(timeout=timeout):
		print 'The page contains "' + txt + '"' 
	else:
		print 'Cannot find "'+ txt + '"' 

#rotation

def rotate_left():
	d.orientation = "l" # "left"

def rotate_right():
	d.orientation = "r" # "right"

def rotate_auto():
	d.orientation = "n" # "natural"

def rotate_freeze():
	d.freeze_rotation()

def rotate_info():
	print 'Rotation info: ' + (d.orientation)

###########gestures##############
#click
def click_txt(txt):
	if d(text=txt).exists:
		d(text=txt).click()

def click_txt_rscId(txt,rscId):
	if d(text=txt,resourceId=rscId).exists:
		d(text=txt,resourceId=rscId).click()

def long_click_txt(txt):
	if d(text=txt).exists:
		d(text=txt).long_click()

def long_click_txt_rscId(txt,rscId):
	if d(text=txt,resourceId=rscId).exists:
		d(text=txt,resourceId=rscId).long_click()

#scroll
# # scroll backward vertically
def scroll_vert_forward():
	d(scrollable=True).scroll.vert.forward()

def scroll_vert_backward():
	d(scrollable=True).scroll.vert.backward()
# scroll to Beginning vertically
def scroll_vert_toBeginning():
	d(scrollable=True).scroll.toBeginning()

def scroll_vert_toEnd():
	d(scrollable=True).scroll.toEnd()

def scroll_horiz_forward():
	d(scrollable=True).scroll.horiz.forward()

def scroll_horiz_backward():
	d(scrollable=True).scroll.horiz.backward()

def scroll_horiz_toBeginning():
	d(scrollable=True).scroll.horiz.toBeginning()

def scroll_horiz_toEnd():
	d(scrollable=True).scroll.horiz.toEnd()

# scroll forward vertically until specific ui object appears
def  scroll_to_txt(txt):
	d(scrollable=True).scroll.to(text=txt)
	# if d(text=scroll_to_text).exists:
	# 	print "the text" + scroll_to_text + " exists"

#swipe
def swipe_left_rscId(rscId,timeout=50):
	if d(resourceId=rscId).wait.exists(timeout=timeout):
		d(resourceId=rscId).swipe.left()

def swipe_right_rscId(rscId,timeout=50):
	if d(resourceId=rscId).wait.exists(timeout=timeout):
		d(resourceId=rscId).swipe.right()

def swipe_up_className(className,timeout=50):
	if d(className=className).wait.exists(timeout=timeout):
		d(className=className).swipe.up()

def swipe_down_rscId(rscId,timeout=50):
	if d(resourceId=rscId).wait.exists(timeout=timeout):
		d(resourceId=rscId).swipe.down()

#drag
# drag the ui object to another ui object(center)
def drag_txt1_to_txt2(txt1,txt2):
	d(text=txt1).drag.to(text=txt2, steps=50)

# drag the ui object to point (x, y)
def drag_txt_to_xy(txt,x,y,steps=100):
	d(text=txt).drag.to(x, y, steps)

############Partial Behavior##################
def swipe_to_applist():
	swipe_left_rscId("com.nokia.z:id/secondTopMostLayout")
	# swipe_up_className("android.widget.RelativeLayout")

#long click options
def longClick_AppInfo(txt):
	long_click_txt_rscId(txt,"com.nokia.z:id/rowTextView")
	click_txt_rscId("App Info","com.nokia.z:id/edit_actions")

def longClick_Hide(txt):
	long_click_txt_rscId(txt,"com.nokia.z:id/rowTextView")
	click_txt_rscId("Hide","com.nokia.z:id/edit_ranking")

def longClick_Uninstall_OK(txt):
	long_click_txt_rscId(txt,"com.nokia.z:id/rowTextView")
	click_txt_rscId("Uninstall","com.nokia.z:id/edit_actions")
	click_txt_rscId("OK","android:id/button1")

	# if d(textContains="Uninstall finished.").wait.exists(timeout=500):
	# 	print 'Uninstall finished.' 
	# else:
	# 	print 'There is no "Uninstall finished." message' 
	
def longClick_Uninstall_Cancel(txt):
	long_click_txt_rscId(txt,"com.nokia.z:id/rowTextView")
	click_txt_rscId("Uninstall","com.nokia.z:id/edit_actions")
	click_txt_rscId("Cancel","android:id/button2")

def reset():
	pass

def reboot():
	pass

def launch():
	pass

def storage():
	# click_txt_rscId("Settings","com.nokia.z:id/rowTextView")
	# click_txt_rscId("Storage","com.android.settings:id/title")
	# if d(className="android.widget.ImageButton",description="More options").exists:
	# 	d(className="android.widget.ImageButton",description="More options").click()
	# click_txt_rscId("USB computer connection","android:id/title")

	if d(index="1",resourceId="android:id/widget_frame").child(resourceId="android:id/checkbox").checkable() = True:
	# for x in range(0,2):
		if d(index="1",resourceId="android:id/widget_frame").child(resourceId="android:id/checkbox").exists:
			d(index="1",resourceId="android:id/widget_frame").child(resourceId="android:id/checkbox").click()
	

start_server()
storage()

# for x in range(2):
# 	print x